#!/usr/bin/env python3

import traceback
import os
import time
import pathlib
import logging
import xml.etree.ElementTree as XML
import requests
from requests.exceptions import Timeout
from urllib3.exceptions import TimeoutError

class Configuration:
    def load_from_env(self):
        self.st_api_key = self.load_api_key()
        self.local_icon = os.getenv('ST_BLOCKLET_LOCAL_ICON', '')
        self.separator = os.getenv('ST_BLOCKLET_SEPARATOR', '  ')
        self.load_block_instance_config()
        self.important_devices = ['Phone', 'Raspberry Pi']
        self.device_display_names = {
            'Phone': '',
            'Raspberry Pi': '',
            'Laptop': '',
            'PC': '',
            'Milena Laptop': 'M',
        }
        return self

    @staticmethod
    def load_api_key():
        config_path = os.getenv('ST_BLOCKLET_ST_CONF', os.path.expandvars('$HOME/.config/syncthing/config.xml'))
        return XML.parse(config_path).find('./gui/apikey').text


    def load_block_instance_config(self):
        if os.getenv('BLOCK_INSTANCE', '') != '':
            split_instance = os.getenv('BLOCK_INSTANCE').split('!')
            env_important_devices = split_instance[0]
            env_device_display_names = split_instance[1]
        else:
            env_important_devices = os.getenv('ST_BLOCKLET_IMPORTANT_DEVICES', '')
            env_device_display_names = os.getenv('ST_BLOCKLET_DEVICE_DISPLAY_NAMES', '')

        self.important_devices = [x for x in env_important_devices.split(';') if x != '']
        self.device_display_names = dict([x.split(':') for x in env_device_display_names.split(';') if x != ''])


class State:
    def __init__(self):
        self.reset()

    def reset(self):
        self.my_id = None
        self.devices = {}
        self.folders = {}

    def syncthing_connected(self):
        return self.my_id is not None

    def local_sync_state(self):
        for folder in self.folders.values():
            if folder['my_completion'] < 100:
                return 'incomplete'
        return 'complete'

    def device_sync_state(self, device_id):
        for folder in state.folders.values():
            if device_id in folder['completions'] and folder['completions'][device_id] < 100:
                return 'incomplete'
        return 'complete'

class SyncthingApiError(Exception):
    """Errors caught during SyncthingApi request"""

class SyncthingApi:
    def __init__(self, api_key):
        self.api_key = api_key
        self.base_url = 'http://localhost:8384'

    def _request(self, path, params=None, timeout=10):
        method = "GET"
        headers = {
            'X-API-Key': self.api_key,
        }

        try:
            resp = requests.request(
                method,
                self.base_url + path,
                params=params,
                timeout=timeout,
                headers=headers
            )
            resp.raise_for_status()
            return resp.json()
        except requests.RequestException as e:
            raise SyncthingApiError("RequestException") from e

    def system_status(self):
        return self._request("/rest/system/status")

    def system_config(self):
        return self._request("/rest/system/config")

    def connections(self):
        return self._request("/rest/system/connections")

    def folder_status(self, folder):
        return self._request("/rest/db/status", params={"folder": folder})

    def folder_completion(self, folder, device):
        return self._request("/rest/db/completion", params={"folder": folder, "device": device})

    def events(self, **kwargs):
        return SyncthingApiEventStream(self, **kwargs)

    def poll_events_once(self, params=None, timeout=60):
        return self._request("/rest/events", params=params, timeout=timeout)

class SyncthingApiEventStream:
    def __init__(self, api, filters=None):
        self.api = api
        self.filters = filters
        self.running = False
        self.since = 0

    def __iter__(self):
        self.running = True

        while self.running:
            params = {
                'since': self.since,
                'events': ','.join(self.filters)
            }

            try:
                results = self.api.poll_events_once(params=params)
            except (Timeout, TimeoutError):
                results = None 

            if results:
                for event in results:
                    yield event
                self.since = results[-1]['id']


config = Configuration().load_from_env()
st2 = SyncthingApi(config.st_api_key)
state = State()

def state_color(connected, sync_state):
    if sync_state == 'complete':
        color = '#FFFFFF'
    elif sync_state == 'incomplete':
        color = '#FF0000'
    else:
        raise 'Unkown state: {}'.format(sync_state)

    if not connected:
        color = color.replace('FF', 'A0')

    return color

def colored_text(color, text):
    return "<span foreground=\"{}\">{}</span>".format(color, text)

def local_status_string():
    color = state_color(state.syncthing_connected(), state.local_sync_state())
    return colored_text(color, config.local_icon)

def device_status_string(device):
    color = state_color(device['connected'], state.device_sync_state(device['id']))
    return colored_text(color, device['display_name'])

def on_change():
    status_strings = []

    status_strings.append(local_status_string())

    for device_id, device in state.devices.items():
        if device_id == state.my_id:
            continue
        if device['name'] not in config.important_devices and device['connected'] == False:
            continue

        status_strings.append(device_status_string(device))

    for folder_id, folder in state.folders.items():
        # Glob for sync-conflict files within folder using pathlib instead of glob module
        # since pathlib includes dotfiles (and dot-directories) which we obviously want here.
        if any(pathlib.Path(folder['path']).glob('**/*sync-conflict*')):
            status_strings.append(colored_text('#FFFF00', folder['label']))

    print(config.separator.join(status_strings), flush=True)

def calculate_my_completion(data):
    if data['globalBytes'] == 0:
      return 100

    data['completion'] = completion = (data['inSyncBytes'] / data['globalBytes']) * 100
    return calculate_completion(data)

def calculate_completion(data):
    completion = data['completion']
    if completion == 100 and (data['needDeletes'] > 0 or data['needBytes'] > 0):
        completion = 99.9
    return completion

def load_initial_state():
    status = st2.system_status()
    state.my_id = status['myID']

    st_config = st2.system_config()

    for folder in st_config['folders']:
        folder_id = folder['id']
        if folder['paused']:
            continue
        state.folders[folder_id] = {
            'id': folder_id,
            'label':  folder['label'],
            'path': folder['path'],
            'my_completion': calculate_my_completion(st2.folder_status(folder_id)),
            'completions': {
                d['deviceID']: calculate_completion(st2.folder_completion(folder_id, d['deviceID'])) for d in folder['devices']
            },
        }

    for device in st_config['devices']:
        device_id = device['deviceID']

        state.devices[device_id] = {
            'id': device_id,
            'name': device['name'],
            'display_name': config.device_display_names.get(device['name'], device['name']),
            'connected': False,
        }

    connections = st2.connections()['connections']
    for device_id, info in connections.items():
        state.devices[device_id]['connected'] = info['connected']

    on_change()

def follow_event_stream():
    event_stream = st2.events(filters=['ConfigSaved', 'DeviceConnected', 'DeviceDisconnected', 'FolderSummary', 'FolderCompletion', 'LocalChangeDetected'])

    try:
        for event in event_stream:
            event_type = event['type']
            data = event['data']

            changed = True
            if event_type == 'ConfigSaved':
                state.reset()
                load_initial_state()
            elif event_type == 'DeviceConnected':
                device_id = data['id']
                state.devices[device_id]['connected'] = True
            elif event_type == 'DeviceDisconnected':
                device_id = data['id']
                state.devices[device_id]['connected'] = False
            elif event_type == 'FolderSummary':
                folder_id = data['folder']
                summary = data['summary']
                new_completion = calculate_my_completion(summary)
                state.folders[folder_id]['my_completion'] = new_completion
            elif event_type == 'FolderCompletion':
                folder_id = data['folder']
                device_id = data['device']
                new_completion = calculate_completion(data)
                state.folders[folder_id]['completions'][device_id] = new_completion
            elif event_type == 'LocalChangeDetected':
                folder_id = data['folderID']
                for device_id in state.folders[folder_id]['completions']:
                    state.folders[folder_id]['completions'][device_id] = 99
            else:
                changed = False

            if changed:
                on_change()
    finally:
        event_stream.stop()

while True:
    try:
        load_initial_state()
        follow_event_stream()
    except (SyncthingApiError) as e:
        state.reset()
        on_change()

        time.sleep(5)
