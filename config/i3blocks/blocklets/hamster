#!/usr/bin/env python2
# -*- coding: utf-8 -*-

from hamster.configuration import runtime
from hamster.lib.stuff import format_duration, Fact
from datetime import datetime, timedelta
import os
from os.path import expanduser
import subprocess
from subprocess import PIPE
import dbus

current_activity = None
facts = runtime.storage.get_todays_facts()
if facts and facts[-1].end_time is None:
    current_activity = facts[-1]
    work_duration = datetime.now() - current_activity.start_time

    #work_icon = u'ÔÉñ'
    #work_icon = u'ÔÇ±'
    #work_icon = u'ÔÑà'
    #work_icon = u'ÔÉ£'
    #work_icon = u'Ôâª'
    work_icon = u'Ôâ∫'

    if current_activity.category == 'uni':
        work_icon = u'ÔÜù'
    elif current_activity.category == 'private-coding':
        #work_icon = u'ÔÑ°'
        #work_icon = u'ÔÅÑ'
        work_icon =u'ÔÜà' 

    longtext = u'{} {}'.format(work_icon, format_duration(work_duration, False))
    shorttext = longtext
    color = '#ffffff'
else:
    longtext = u'ÔÉ¥'
    #longtext = u'üò¥'
    shorttext = longtext
    color = '#a0a0a0'

if os.getenv('BLOCK_BUTTON') in ['1','3']:
    activity_text = 'Start new activity'
    if current_activity is not None:
        activity_text = '{} ({})'.format(current_activity.serialized_name(), format_duration(work_duration, False))
    menu_entries = [
            activity_text,
            'Stop tracking' if current_activity is not None else '',
            'Add previous activity',
            'Overview',
            'Statistics',
            'Settings']
    menu_entries = filter(None, menu_entries)

    rofi = subprocess.Popen(['rofi', '-dmenu', '-i', '-lines', str(len(menu_entries)), '-p', 'Hamster: '], stdin=PIPE, stdout=PIPE)
    selection = rofi.communicate(input='\n'.join(menu_entries))[0].strip()

    def show_hamster_window(window_name):
        bus = dbus.SessionBus()
        server = bus.get_object("org.gnome.Hamster.WindowServer",
                                "/org/gnome/Hamster/WindowServer")
        getattr(server, window_name)()

    def remove_duplicates_preserving_order(xs):
        seen = set()
        return [x for x in xs if not (x in seen or seen.add(x))]

    def rofi_start_tracking():
        facts = runtime.storage.get_facts(datetime.now() - timedelta(days=365), datetime.now())
        entries = remove_duplicates_preserving_order(reversed([fact.serialized_name() for fact in facts]))
        rofi = subprocess.Popen(['rofi', '-dmenu', '-i', '-p', 'Start: '], stdin=PIPE, stdout=PIPE)
        selection = rofi.communicate(input='\n'.join(entries))[0]
        if selection != '':
            runtime.storage.add_fact(Fact(selection.strip()))
        print(selection)


    if selection == activity_text:
        rofi_start_tracking()
    elif selection == 'Stop tracking':
        runtime.storage.stop_tracking()
    elif selection == 'Add previous activity':
        show_hamster_window('edit')
    elif selection == 'Overview':
        show_hamster_window('overview')
    elif selection == 'Statistics':
        show_hamster_window('statistics')
    elif selection == 'Settings':
        show_hamster_window('preferences')


print(longtext)
print(shorttext)
print(color)
