#!/usr/bin/env python2
# -*- coding: utf-8 -*-

from hamster.configuration import runtime
from hamster.lib.stuff import format_duration, Fact
from datetime import datetime, timedelta
import os
from os.path import expanduser
import subprocess
from subprocess import PIPE
import dbus
import re

current_activity = None
latest_activity = None
facts = runtime.storage.get_todays_facts()
if facts:
    latest_activity = facts[-1]
if facts and facts[-1].end_time is None:
    current_activity = facts[-1]
    work_duration = datetime.now() - current_activity.start_time

    work_icon = u'ï‚±'

    # The last character of the category may be an icon
    last_category_char = current_activity.category[-1]
    # Treat characters in the Unicode Private Use Area as icons
    if last_category_char >= u'\ue000' and last_category_char <= u'\uf8ff':
        work_icon = last_category_char

    # If the activity starts with a TargetProcess id, we want to show that as well
    ticket_id = ''
    tp_reference_match = re.match('^[tT][pP]-([0-9]+) ', current_activity.activity)
    if tp_reference_match:
        ticket_id = '#{}'.format(tp_reference_match.group(1))

    time_separator = '' if ticket_id == '' else ' - '

    longtext = u'{} {}{}{}'.format(work_icon, ticket_id, time_separator, format_duration(work_duration, False))
    shorttext = longtext
    color = '#ffffff'
else:
    longtext = u'ïƒ´'
    #longtext = u'ðŸ˜´'
    shorttext = longtext
    color = '#a0a0a0'

if os.getenv('BLOCK_BUTTON') in ['1','3']:
    activity_text = 'Start new activity'
    start_from_latest_text = ''
    if current_activity is not None:
        activity_text = '{} ({})'.format(current_activity.serialized_name(), format_duration(work_duration, False))
    elif latest_activity is not None:
        start_from_latest_text = 'Start new activity from {}'.format(latest_activity.end_time)

    menu_entries = [
            activity_text,
            start_from_latest_text,
            'Stop tracking' if current_activity is not None else '',
            'Add previous activity',
            'Overview',
            'Statistics',
            'Settings']
    menu_entries = filter(None, menu_entries)

    rofi = subprocess.Popen(['rofi', '-dmenu', '-i', '-lines', str(len(menu_entries)), '-p', 'Hamster'], stdin=PIPE, stdout=PIPE)
    selection = rofi.communicate(input='\n'.join(menu_entries))[0].strip()

    def show_hamster_window(window_name):
        bus = dbus.SessionBus()
        server = bus.get_object("org.gnome.Hamster.WindowServer",
                                "/org/gnome/Hamster/WindowServer")
        getattr(server, window_name)()

    def remove_duplicates_preserving_order(xs):
        seen = set()
        return [x for x in xs if not (x in seen or seen.add(x))]

    def rofi_start_tracking(start_time=None):
        facts = runtime.storage.get_facts(datetime.now() - timedelta(days=365), datetime.now())
        entries = remove_duplicates_preserving_order(reversed([fact.serialized_name() for fact in facts]))
        rofi = subprocess.Popen(['rofi', '-dmenu', '-i', '-p', 'Start'], stdin=PIPE, stdout=PIPE)
        # Allow ending new entry with ! so you can create a new entry that contains a substring of another
        selection = rofi.communicate(input='\n'.join(entries))[0].strip().strip('!')
        # Abort, if nothing is selected or entered
        if selection == '':
            return
        # If the entered text does not contain an @-Symbol, follow up with an auto-complete selection
        # of a category to assign this new activity to
        if not '@' in selection:
            categories = remove_duplicates_preserving_order(reversed([fact.category for fact in facts]))
            rofi = subprocess.Popen(['rofi', '-dmenu', '-i', '-p', 'Category'], stdin=PIPE, stdout=PIPE)
            category_selection = rofi.communicate(input='\n'.join(categories))[0].strip()
            if category_selection != '':
                selection = '@'.join([selection, category_selection])

        # Now add a new fact, starting the selected activity now
        runtime.storage.add_fact(Fact(selection, start_time=start_time))

    if selection == activity_text:
        rofi_start_tracking()
    elif selection == start_from_latest_text:
        rofi_start_tracking(start_time=latest_activity.end_time)
    elif selection == 'Stop tracking':
        runtime.storage.stop_tracking()
    elif selection == 'Add previous activity':
        show_hamster_window('edit')
    elif selection == 'Overview':
        show_hamster_window('overview')
    elif selection == 'Statistics':
        show_hamster_window('statistics')
    elif selection == 'Settings':
        show_hamster_window('preferences')


print(longtext)
print(shorttext)
print(color)
